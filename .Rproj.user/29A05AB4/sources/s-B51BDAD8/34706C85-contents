# Copyright 2016 Province of British Columbia 
# 
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0 
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and limitations under the License. 


# Read libraries
#library(shiny);library(plotly);library(shinydashboard);library(tidyr);library(dplyr);library(shinythemes);library(flexdashboard)



#students <- read.csv("data/SO_Dashboard_Test_Data_V5_removeall.csv", header=T) 

  # filter (!(CREDENTIAL=="Bachelor's Degree" & INSTITUTION_NAME == "All Institutions")) # this line is for this file (O_Dashboard_Test_Data_V5.csv")

  #filter (!(CREDENTIAL=="Bachelor's Degree" & INSTITUTION_NAME == "All Institutions"))

# Read libraries


box_wrapper <- function(value, title){
  div(class="example", style="border-radius: 5px;border: 2px solid #fff; display:flex; width: 100%; align-items:center;justify-content:center; flex-direction: column;color:#2A64AB;height: 150px;margin:2% 0 2% 0",
         p(value, style= "font-weight: bold; font-size:2.2vw;"),
         p(title, style="text-align: center;font-size:  1.5vw;")
    )
}

box_wrapper2 <- function(value, title){
  div(style="background-color: #E0EBF6; border-radius: 5px;border: 2px solid #fff; display:flex; width: 100%; align-items:center;justify-content:center; flex-direction: column;color:#2A64AB;height: 150px;margin:2% 0 2% 0;",
      p(value, style= "font-weight: bold; font-size:2.2vw;"),
      p(title, style="text-align: center;font-size: 1.5vw;")
  )
}






imageWrapper2<-function(value,title="",img, width="100%",height="200px"){
  div(style="background: #fff;margin-bottom: 8px;",
      div(title,style="background: #fff;color: #1a3f72;font-size: 1.5vw;font-weight: bold;padding: 7px 10px; text-align: center"),
      div(style="width:33.3%; height: 130px; margin:0 auto;display:flex; align-items:center;justify-content:center;",
          tags$img(src=img, style="max-height:100%;height: 7vw;float:left;"),
          p(value, style="margin:5%; font-weight: bold;font-size:2.5vw;")
      )
  )
  
}


imageWrapper_text<-function(value,title="",img, width="100%",height="200px"){
  div(style="background: #fff;margin-bottom: 8px;",
      div(title,style="background: #fff;color: #1a3f72;font-size: 1.5vw;font-weight: bold;padding: 7px 10px; text-align: center"),
      div(style="width:33.3%; height: 130px; margin:0 auto;display:flex; align-items:center;justify-content:center;",
          tags$img(src=img, style="max-height:100%;height: 7vw; float:left;"),
          p(value, style="margin:5%; font-weight: bold;font-size:1.2vw;")
      )
  )
  
}
 

#Creating valuebox for images
customImageValueBox<-function(value,subtitle,img,imageHeight= 4,color = "aqua", width = NULL,href = NULL){
  shinydashboard::valueBox(div(value, style="margin:10px; font-weight: bold;font-size:2.5vw;"),subtitle
                           ,icon=tags$i(style="position: relative;top: 0.03vw;bottom:0.03vw;",tags$img(src=img,style=paste0("height:",imageHeight,"vw; max-width: 100%;max-height:110px; top: -10px;vertical-align: text-top;"))),color=color,width=NULL,href=href)
}


#Creating valuebox for images
customImageValueBox_text<-function(value,subtitle,img,imageHeight= 4,color = "aqua", width = NULL,href = NULL){
  shinydashboard::valueBox(div(value, style="margin:10px; font-weight: bold;font-size:1.2vw;"),subtitle
                           ,icon=tags$i(style="position: relative;top: 0.03vw;bottom:0.03vw;",tags$img(src=img,style=paste0("height:",imageHeight,"vw; max-width: 100%;max-height:110px; top: -10px;vertical-align: text-top;"))),color=color,width=NULL,href=href)
}

# creating side by side valuebox
sidebysideValueBox<-function(title,value1,value1title,img1,value2,value2title,img2,color="aqua",width=4,href=NULL){
  shinydashboard:::validateColor(color)
  
  if(!is.numeric(value1)){
    stop("value1 is not numeric")
  }
  if(!is.numeric(value2)){
    stop("value2 is not numeric")
  }
  v1Larger<-value1>value2
  
  scales<-c(75,75)
  if(v1Larger){
    scales[1]<-75
    scales[2]<-round(75*sqrt(value2/value1))
  }else{
    scales[1]<-round(75*sqrt(value1/value2))
    scales[2]<-75
  }
  
  if(any(scales<30)){
    scales[which(scales<30)]<-30
  }
  
  
  boxContent <- div(class = paste0("small-box bg-", color), 
                    div(class = "inner",style="height:100%;",
                        
                      div(class="value1",style="width:49%;height:100%; display: inline-block;",
                          div(style="display: inline-block;width:auto;height:auto;vertical-align: top;padding-right:5px;",
                              tags$i(style="position: relative;top: 5px;right:0px;float:right;",
                                     tags$img(src=img1,style=paste0("height:",scales[1],"px;vertical-align: bottom; max-width:75px;")))),
                          div(style="text-align: center;position:absolute;",h3(paste0(value1,"%", sep=""), style="font-size:1.9vw;"),p(value1title),style="display:inline-block;")),
                      div(class="value2",style="width:49%;height: 100%; display: inline-block;right:0px;float:right;text-align:center;",

                          div(style="display: inline-block;width:auto;height:auto;vertical-align: top;padding-right:5px;",
                              tags$i(style="position: relative;top: 5px;right:0px;float:right;",
                                     tags$img(src=img2,style=paste0("height:",scales[2],"px;vertical-align: bottom; max-width:75px;")))),
                          div(style="text-align: center;position:absolute;",h3(paste0(value2,"%",sep=""),style="font-size:1.9vw;"),p(value2title),style="display:inline-block;")
                    )
                    )
  )
  
  if (!is.null(href)) 
    boxContent <- a(href = href, boxContent)
  
  div(class = if (!is.null(width)) 
    paste0("col-sm-", width), boxContent)

  
}


ageImageValueBox<-function(value,img,color = "aqua", width = 1,height="115px",href = NULL){
  shinydashboard:::validateColor(color)
  shiny::validateCssUnit(height)
  boxContent <- div(class = paste0("small-box bg-", color), style=paste0("top: 0;right: 0; bottom:0;height: ",height,";background-color: white !important;color: #666 !important;text-align:center;"),
                    div(class = "inner",style="height: inherit;display: inline-block;vertical-align: middle; padding-top:7%;", h3(value)), if (!is.null(icon)) 
                      div(class = "icon-large",style="height: inherit;padding-top: 10px;padding-bottom: 10px;vertical-align: middle;",
                          tags$i(style="top: 5px;vertical-align: bottom;height: 100%;",
                                 tags$img(src=img,style=paste0("height:4.5vw;display: block; vertical-align: top;")))))

  if (!is.null(href)) 
    
    boxContent <- a(href = href, boxContent)
  div(class = if (!is.null(width)) 
    paste0("col-sm-", width), boxContent)
}




shinyServer(function(input, output, session){
  # some data manipulation to drive the KPIs
  
  toggleModal(session, "startupModal", toggle = "open")


  
  # suppress warnings  
  storeWarn<- getOption("warn")
  options(warn = -1) 
  
  output$student_group <- renderUI({
      div(style="display: inline-block;",
          selectizeInput("student_group", "1. Student Group",choices= as.character(unique(students$CREDENTIAL)), 
                selected = "Apprenticeship",
                width = 315)
      )
          

  })
  

  

  output$institution <- renderUI({
    div(style="display: inline-block;",
    selectizeInput("institution", "2. Institution",choices= as.character(unique(students$INSTITUTION_NAME[students$INSTITUTION_NAME==as.character(unique(students$INSTITUTION_NAME))[1]])),
                width = 315,
                selected=NULL)
    )
  

  })
  
  

  output$program <- renderUI({
    div(style="display: inline-block;",
    selectizeInput("program", "3. Program Area",
                choices=
                  as.character(unique(
                    students$PROGRAM_AREA_NAME[
                      students$student_group==as.character(unique(students$student_group))[1] & 
                        students$INSTITUTION_NAME==as.character(unique(students$INSTITUTION_NAME[students$student_group==as.character(unique(students$student_group))[1]]))[1]])),
                width = 315,selected=NULL
                )
    )
    
  })
  
  all_inst <- c("All Institutions (public & private)","All Institutions")
  ### TO BE MODIFIED
  output$program_name <- renderUI({
    
    if (is.null(input$institution)){
      return(NULL)
    }
    
    else if (!(input$institution %in% all_inst)){
      div(style="display: inline-block;",
          selectizeInput("program_name", "4. Program Name",
                         choices=
                           as.character(unique(students$PROGRAM_NAME[students$PROGRAM_AREA_NAME==input$program])),
                         
                         width = 315, selected="All Programs"
          )
      )
    } else{
      
      return(NULL)
    }
    
   

 
  })
  
 
  

  observeEvent(input$student_group,{

    updateSelectInput(session,'institution',
                      choices=unique(students$INSTITUTION_NAME[students$CREDENTIAL==input$student_group]))
  })
  
  
  observeEvent(c(input$student_group,input$institution),{
    
    updateSelectInput(session,'program',
                      choices=unique(students$PROGRAM_AREA_NAME[students$CREDENTIAL==input$student_group &
                                                                  students$INSTITUTION_NAME==input$institution]))
  })
  


  
  observeEvent(c(input$student_group,input$institution, input$program),{
    
    updateSelectInput(session,'program_name',
                      choices=sort(unique(students$PROGRAM_NAME[students$CREDENTIAL==input$student_group &
                                                             students$INSTITUTION_NAME==input$institution & 
                                                             students$PROGRAM_AREA_NAME==input$program])))
  })
  


  


  #observeEvent(input$student_group,{
    #if (input$student_group =="Bachelor's Degree"){
      #addPopover(session, institution, "select", "select an insti", placement = "bottom", trigger = "hover", options = NULL)
      #showModal(modalDialog(title = "Somewhat important message","This is a somewhat important message.",easyClose = TRUE,footer = NULL))
    #}
  #}
  #)
  
  # error message to select an institution for bachelor's degree
  output$alert <- renderUI({
    req(input$student_group)
    if((input$student_group =="Bachelor's Degree") & (input$institution =="") ){
      HTML(paste0("<div style='color:white;padding-left:18px;padding-top:20px;font-size: 14px;'>","<b>", "Please select an institution","<b>","</div>"))
      }else{
        NULL
        }
  })
  
  

  # Create reactive values for input data
  filtered_data <- reactive({
    
   
    input_CREDENTIAL<-ifelse(is.null(input$student_group),"Associate Degree",input$student_group) 
    input_institution<-ifelse(is.null(input$institution),"All Institutions",input$institution)  
    input_program<-ifelse(is.null(input$program),"Overall",input$program)
    input_program_name<-ifelse(is.null(input$program_name),"All Programs",input$program_name)
    
    req(input$student_group)
    req(input$institution)
    req(input$program)
    ifelse(!(input$institution %in% all_inst),req(input$program_name),TRUE)
    

    
    students[students$CREDENTIAL==input_CREDENTIAL, ] %>%
      filter( INSTITUTION_NAME %in% input_institution) %>%
      filter (PROGRAM_AREA_NAME%in% input_program) %>% 
      #filter(PROGRAM_NAME %in% input_program_name) %>% 
      filter (if(!(input$institution %in% all_inst)) PROGRAM_NAME %in% input_program_name else TRUE)

  })
  


#### Side bar------  
  
  output$respondents <- renderUI({
    div (format(filtered_data()$RESPONDENTS,big.mark=","),style="text-align: left; vertical-align:middle;font-size:1.9vw;font-weight: bold;padding:10px;",br(),
      
         div("Respondents",style="text-align: left; vertical-align:middle;color: white;font-size: 0.9vw; font-weight: normal;" )
    )
    
  })
  
 

  # NEW
  output$gender <- renderUI ({
    
    req(filtered_data()$MALE)
    
    male <- if(filtered_data()$MALE==-3){
      "Fewer than 10%"
    }else if (filtered_data()$MALE==-4){
      "More than 90%"
    }else if (filtered_data()$MALE==-5){
      "Majority"
      
    }else if (filtered_data()$MALE==-99){
      "Too few responses to report"
    }else if (filtered_data()$MALE==-1){
      ""
    }else{
      paste(round(filtered_data()$MALE*100, digits=0), "%", sep="")
    }
    
    female <- if(filtered_data()$FEMALE==-3){
      "Fewer than 10%"
    }else if (filtered_data()$FEMALE==-4){
      "More than 90%"
    }else if (filtered_data()$FEMALE==-2){
      "Majority"
      
    }else if (filtered_data()$FEMALE==-99){
      "Too few responses to report"
    }else if (filtered_data()$FEMALE==-1){
      ""
    }else{
      paste(round(filtered_data()$FEMALE*100, digits=0), "%", sep="")
    }
    
    
    
    
    
    div(
      div(class= "img_text", style="display: flex;flex-direction: row;justify-content: center;align-items: center;color: #2A64AB",
          tags$img(src = "img/People.png", width = "80px", height = "80px", style="vertical-align: middle; height: 50%;max-weight: 100%; float:left;"),
          div(class="gender", style="display: flex;flex-direction: column;margin: 10px;;",
              div(class="male", style="display: flex;flex-direction: row;justify-content: space-between;align-items: center;",
                  h1(male,style=";font-weight: bold;padding-right: 10px;font-size: 2vw; text-align: right;"),
                  h1("were male", style="font-size:1.5vw;text-align: left;")
              ),
              div(class="female", style="display: flex;flex-direction: row;justify-content: space-between;align-items: center;",
                  h1(female, style="font-weight: bold;padding-right: 10px; font-size: 2vw; text-align: right;"),
                  h1("were female", style="font-size: 1.5vw; text-align: left;")
              )
          )
      )
    )       

  })
  

  output$age <- renderUI ({
    
    req(filtered_data()$AGE)
    div(style="display: flex;justify-content: center;align-items: center;padding: 30px;/* padding: 20px;color: #2A64AB;",
        tags$img(src = "img/Birthday_cake.png", width = "90px", height = "90px", style="float:left;"),
        h1(round(filtered_data()$AGE), style="font-weight: bold;color: #2A64AB;margin:3%; font-size:2.4vw;"),
        h1(HTML("was the", "<b>","median age","</b>","<br>","at the time of the survey"), style="color: #2A64AB;font-size:1.2vw;")
    )
  
        

  })
  
  
  
  output$satisfaction2 <- renderUI ({
    
    req(round(filtered_data()$satisfaction_rate*100,digits=0))
    div(style="background: #E0EBF6;margin-bottom: 8px;display: flex;align-items:center;justify-content:center;border-radius: 5px;border: 2px solid #E0EBF6;height:9vh;",
        span(paste0(round(filtered_data()$satisfaction_rate*100,digits=0),"%"), style="color: #2A64AB; font-size:2.2vw;margin: 2%;font-weight: bold;"),
        span(HTML("were", "<strong>", "satisfied with their education","</strong>"),  style="font-size:1.5vw;color: #2A64AB;")
        
    )
    
  })
  
  
  output$quality_education <- renderUI ({
    req(filtered_data()$instruction)
    box_wrapper(paste0(round(filtered_data()$instruction * 100,0),"%"), HTML("said the", "<b>","quality of instruction","</b>","<br>", "was very good or good"))

  })
  
  output$employed_full_time <- renderUI ({

    req(filtered_data()$EMPLOY_FULL_TIME)
    
    employed_full_time <- if(filtered_data()$EMPLOY_FULL_TIME==-3){
      "Fewer than 10%"
    }else if (filtered_data()$EMPLOY_FULL_TIME==-4){
      "More than 90%"
    }else if (filtered_data()$EMPLOY_FULL_TIME==-8){
      "Minority"
      
    }else if (filtered_data()$EMPLOY_FULL_TIME==-9){
      "Majority"
      
    }else if (filtered_data()$EMPLOY_FULL_TIME==-99){
      "Too few responses to report"
    }else{
      paste(round(filtered_data()$EMPLOY_FULL_TIME*100, digits=0), "%", sep="")
    }
    
    
    # Changing font size based on the value, if there is a suppression the text size should be smaller
    
    if (nchar(employed_full_time)>= 4){
      box_wrapper2(employed_full_time,"were employed full-time")
      
    }else{
      box_wrapper2(employed_full_time, "Employed full-time")
    }
    

  })
  
  
  output$further_studies <- renderUI ({
    req(filtered_data()$instruction)
    title_alternate <- if (filtered_data()$CREDENTIAL == "Trades Foundation"){
        "obtained employment as an apprentice"
      } else if (filtered_data()$CREDENTIAL == "Apprenticeship"){
        "received their certificate of qualification"
      } else{
        "took further studies"
      }
    

    box_wrapper2(paste0(round(filtered_data()$instruction * 100,0),"%"), title_alternate)
    
  })
  
  output$related_program <- renderUI ({
    req(filtered_data()$JOB_PROGRAM_RELATED)
    box_wrapper(paste0(round(filtered_data()$JOB_PROGRAM_RELATED*100,0),"%"),HTML("of employed respondents","<br>", "were in a job","<b>", "related to their program","<b/>"))
    
  })
  
  

  
  # output$related_program <- renderUI ({
  #   req(filtered_data()$JOB_PROGRAM_RELATED)
  #   
  #   imageWrapper2(paste(round(filtered_data()$JOB_PROGRAM_RELATED*100, digits=0), "%", sep=""), "Main job is related to program",img = "img/self_employed.png")
  # })
  
  # output$further_studies <- renderUI ({
  #   req(filtered_data()$FURTH_STUDIES)
  #   
  #   imageWrapper2(paste(round(filtered_data()$FURTH_STUDIES*100, digits=0), "%", sep=""), "Took further studies",img = "img/qualification.png")
  # })
  # 
  # output$unemployment_rate <- renderUI ({
  #   
  #   req(filtered_data()$UNEMPLOYED)
  #   
  #   unemployed <- if(filtered_data()$UNEMPLOYED==-3){
  #     "Fewer than 10%"
  #   }else if (filtered_data()$UNEMPLOYED==-4){
  #     "More than 90%"
  #   }else if (filtered_data()$UNEMPLOYED==-12){
  #     "Minority were unemployed"
  #     
  #   }else if (filtered_data()$UNEMPLOYED==-13){
  #     "Majority were unemployed"
  #     
  #   }else if (filtered_data()$UNEMPLOYED==-99){
  #     "Too few responses to report"
  #   }else{
  #     paste(round(filtered_data()$UNEMPLOYED*100, digits=1), "%", sep="")
  #   }
  #   

  #   if (nchar(unemployed) > 5){
  #     imageWrapper_text(unemployed,"Unemployment rate",img = "img/unemployment.png")
  #     
  #   }else{
  #     imageWrapper2(unemployed, "Unemployment rate",img = "img/unemployment.png")
  #   }
  #   
  # 
  #   
  # })
  # 

      

  
 
  # plot for different skills
  
  data_skill_plot <- reactive({
    
    req(filtered_data()$Read)
    req(filtered_data()$Write_Clearly)
    req( filtered_data()$Speak_Clearly)
    req( filtered_data()$Work_With_Others)
    req(filtered_data()$Think_Critically)
    req(filtered_data()$Resolve_Issues)
    req(filtered_data()$Learn_Independently)
    
    
    Skills_Development<- c("Read and comprehend material", "Write clearly and concisely","Speak effectively", "Work effectively with others","Analyse and think critically","Resolve issues or problems","Learn independently")
    values <- c(filtered_data()$Read, filtered_data()$Write_Clearly, filtered_data()$Speak_Clearly, filtered_data()$Work_With_Others, filtered_data()$Think_Critically, filtered_data()$Resolve_Issues,
                filtered_data()$Learn_Independently)
    
    data <- data.frame(Skills_Development, values) 
      
    #data$values <- paste(round(data$values*100, digits=0), "%", sep="")
    return(data)

  })
  
  output$plot_skills <- renderPlotly ({
    
    plot_ly (x = data_skill_plot()$values,
             y = ~ reorder(data_skill_plot()$Skills_Development, data_skill_plot()$values),
             type = 'bar', marker = list(color='rgb(26,63,114)')) %>% 
      layout(title = '', titlefont = list(
        family = "Myriad-Pro",
        size = 16),
        orientation = 'h',
        xaxis = list(title = "",tickformat = "%",zeroline=FALSE,fixedrange=TRUE),
        yaxis = list(title = "",fixedrange=TRUE),
        margin = list(l = 220, pad=7)) %>% 
      add_annotations(xref = 'x', yref = 'y',
                      x =data_skill_plot()$values , 
                      y = reorder(data_skill_plot()$Skills_Development, data_skill_plot()$values),
                      text = paste(round(data_skill_plot()$values*100, digits=0), "%", sep=""),
                      showarrow = FALSE,xanchor = 'left',xshift = 3,opacity = 0.7) %>% 
      config(displayModeBar = F)  
 
  })
  

  ########## NEED TO SOLVE
  #TIP <- reactiveValues()
  #observe({
    #TIP$a <- ifelse(input$student_group =="Bachelor's Degree","select an insti","Hello Mars")
  #})
  
  #tipify("instruction",TIP$a )
  
  #output$instruction2 <- renderUI({
    #span("My box",tipify(el = "instruction2", title = TIP$a))
    #})
  

  #observeEvent(input$student_group,{
    #if (input$student_group =="Bachelor's Degree"){
      #addTooltip(session, "instruction", title_b, placement = "bottom", trigger = "hover", options = NULL)
    #}else{
      #addTooltip(session, "instruction", title_all, placement = "bottom", trigger = "hover", options = NULL)

    #}
  #}
  #)


  #}else{
  #addTooltip(session, "instruction", title_all, placement = "bottom", trigger = "hover", options = NULL)
  
  #}
  #}
  #)

  #ifelse(x() == "Bachelor's Degree", addTooltip(session,id= "instruction" , title = "Those who responded very good, good, or adequate." , placement ="left", trigger = "hover"),
         #addTooltip(session,id= "instruction" , title = "Those who responded very good, good." , placement ="left", trigger = "hover"))

          
  
  

  
  #output$satisfaction2<-renderGauge({
    
    #from demo at https://rmarkdown.rstudio.com/flexdashboard/using.html#gauges
    #gauge(round(filtered_data()$satisfaction_rate*100,digits=0), min = 0, max = 100, symbol = '%',
          #gaugeSectors( success = c(80, 100),
                        #warning = c(40, 79),
                        #danger = c(0, 39)))

  
  # EMPLOYMENT

  # 1. Percentages of students in labour Force
  output$labour<-renderUI({
    
    req(filtered_data()$IN_LABR_MKT)
    
    
    imageWrapper2(paste(round(filtered_data()$IN_LABR_MKT*100, digits=0), "%", sep=""),"In labour force",img = "img/Gears.png")
  })

  # 2. wage - conditional - bachelor's degree display salary wage
  output$wage<-renderUI({
  
    req(input$student_group)
    req(filtered_data()$SALARY_WAGE)
    
    wage <- if(filtered_data()$SALARY_WAGE==-99){
      "Too few responses to report"
    }else{
      paste0("$",format(round(filtered_data()$SALARY_WAGE,0),big.mark=","))
    }
    
    
    
    if (input$student_group=="Bachelor's Degree"){
      imageWrapper2(wage,"Median annual salary",img = "img/Dollar.png")
    }else if (nchar(wage)>5){
      imageWrapper_text(wage, "Median hourly wage",img = "img/Dollar.png")
    }else{
      
      imageWrapper2(wage,"Median hourly wage",img = "img/Dollar.png")
    }
  })
  
  # 3. Unemployment rate
  
  output$unemploy_rate<-renderUI({
    
    req(filtered_data()$UNEMPLOYED)
    
    unemployed <- if(filtered_data()$UNEMPLOYED==-3){
      "Fewer than 10%"
    }else if (filtered_data()$UNEMPLOYED==-4){
      "More than 90%"
    }else if (filtered_data()$UNEMPLOYED==-12){
      HTML("Minority")
      
    }else if (filtered_data()$UNEMPLOYED==-13){
      HTML("Majority")
      
    }else if (filtered_data()$UNEMPLOYED==-99){
      "Too few responses to report"
    }else{
      paste(round(filtered_data()$UNEMPLOYED*100, digits=1), "%", sep="")
    }
    
    if (nchar(unemployed) > 5){
      imageWrapper_text(unemployed,"Unemployment rate",img = "img/Job search.png")
      
    }else{
      imageWrapper2(unemployed,"Unemployment rate",img = "img/Job search.png")
    }
    
  })
  
  

  # Employment rate 
  
  output$employment_rate<-renderUI({
    
    req(filtered_data()$EMPLOYED)
    
    employed <- if(filtered_data()$EMPLOYED==-3){
      "Fewer than 10%"
    }else if (filtered_data()$EMPLOYED==-4){
      "More than 90%"
    }else if (filtered_data()$EMPLOYED==-10){
      HTML("Minority")
      
    }else if (filtered_data()$EMPLOYED==-11){
      HTML("Majority")
      
    }else if (filtered_data()$EMPLOYED==-99){
      "Too few responses to report"
    }else{
      paste(round(filtered_data()$EMPLOYED*100, digits=0), "%", sep="")
    }
    
    
    div(style="background: #E0EBF6;margin-bottom: 8px;display: flex;align-items:center;justify-content:center;border-radius: 5px;border: 2px solid #E0EBF6;height:9vh;",
        span(employed, style="color: #2A64AB; font-size:2.2vw;margin: 2%;font-weight: bold;"),
        span(HTML("of all respondents were employed"),  style="font-size:1.5vw;color: #2A64AB;")
        
    )
  
    
  })
 
  

  # Employed full-time 
  output$full_time<-renderUI({
    
    req(filtered_data()$EMPLOY_FULL_TIME)
    
    employed_full_time <- if(filtered_data()$EMPLOY_FULL_TIME==-3){
      "Fewer than 10%"
    }else if (filtered_data()$EMPLOY_FULL_TIME==-4){
      "More than 90%"
    }else if (filtered_data()$EMPLOY_FULL_TIME==-8){
      HTML("Minority")
      
    }else if (filtered_data()$EMPLOY_FULL_TIME==-9){
      HTML("Majority")
      
    }else if (filtered_data()$EMPLOY_FULL_TIME==-99){
      "Too few responses to report"
    }else{
      paste(round(filtered_data()$EMPLOY_FULL_TIME*100, digits=0), "%", sep="")
    }
    
    if (nchar(employed_full_time) > 4){
      box_wrapper(employed_full_time, "were employed full-time")
      
    }else{
      box_wrapper(employed_full_time,"were employed full-time")
    }
    
  })
  
  output$self<-renderUI({
    
    req(filtered_data()$SELF_EMPLOYED)
    
      self_employed <- if(filtered_data()$SELF_EMPLOYED==-3){
        "Fewer than 10%"
      }else if (filtered_data()$SELF_EMPLOYED==-4){
        "More than 90%"
      }else if (filtered_data()$SELF_EMPLOYED==-6){
        HTML("Minority")
        
      }else if (filtered_data()$SELF_EMPLOYED==-7){
        HTML("Majority")
        
      }else if (filtered_data()$SELF_EMPLOYED==-99){
        "Too few responses to report"
      }else{
        paste(round(filtered_data()$SELF_EMPLOYED*100, digits=0), "%", sep="")
      }
      
      if (nchar(self_employed) > 4){
        box_wrapper2(self_employed,"were self-employed")
        
      }else{
        box_wrapper2(self_employed,"were self-employed")
      }
      

  })
  
  # were in a job related to their program
  output$related_program_emp <- renderUI ({
    req(filtered_data()$JOB_PROGRAM_RELATED)
    box_wrapper2(paste0(round(filtered_data()$JOB_PROGRAM_RELATED*100,0),"%"),HTML("of employed respondents","<br>", "were in a job","<b>", "related to their program","<b/>"))
    
  })
  
  output$knowledge_skill_useful <- renderUI ({
    req(filtered_data()$USEFUL_PERFORM_JOB)
    box_wrapper(paste0(round(filtered_data()$USEFUL_PERFORM_JOB*100,0),"%"),HTML("said the knowledge and skills gained","<br>", "were","<b>", "useful in performing their job","<b/>"))
    
  })
  

  


  output$demographics <- renderUI({
    HTML("Summary Indicators")
  })
  

  # text for satisfaction section
  output$text3 <- renderUI({
    HTML(paste("<em>", "Former students were asked how helpful their program was in their development of a number of skills. Percentages are those who responded that their program was very helpful or helpful in developing the skill.","</em>","</p>"))
  })
  
  output$text_skill <- renderUI({
    HTML(paste("<em>", "Select a skill from the dropdown menu on the right to view results by program area.","</em>","</p>"))
  })
  

  
  


  # text for summary section
  output$text1 <- renderUI({
    HTML("<em>","Former post-secondary students were asked about their educational experiences, subsequent employment, and further studies. Here is a summary of the results:", "</em>")
  })
  

  
  output$satisfaction_text <- renderUI({
    if (is.null(input$program_name)){
      return(NULL)
    }
    
    else if (input$program_name != "All Programs"){
      HTML("<strong>","See more results by program name...", "</strong>")
      
    }else{
      
      HTML("<strong>","See more results by program area...", "</strong>")
    }
    
    
  })
  
  
  


 
  
  # Reactive value for Further Studies Plot under Demographics
  ## addition - added one reactive
  data_plot_all <- reactive ({
    
    req(input$student_group)
    req(input$institution)
    req(input$program)
    
    if(!(input$institution %in% all_inst)){
      req(input$program_name)
    
    }
    


    students[students$CREDENTIAL==input$student_group, ] %>% 
      filter(INSTITUTION_NAME %in% input$institution) %>% 
      filter(PROGRAM_AREA_NAME %in% input$program) %>% 
      mutate(
        fillColor=ifelse(PROGRAM_NAME==input$program_name,paste('rgba(',paste(col2rgb('#1a3f72'),collapse=", "),",1)"),
                         paste('rgba(',paste(col2rgb('#1a3f72'),collapse=", "),",0.5)"))) %>% 
      mutate(
        fillColor_skill=ifelse(PROGRAM_NAME==input$program_name,paste('rgba(',paste(col2rgb('#1a3f72'),collapse=", "),",1)"),
                         paste('rgba(',paste(col2rgb('#1a3f72'),collapse=", "),",0.5)")))

  })
  
  
  
  data_plot_all_programs <- reactive ({
    
    req(input$student_group)
    req(input$institution)
    req(input$program)

    students[students$CREDENTIAL==input$student_group, ] %>% 
      filter(INSTITUTION_NAME %in% input$institution) %>%
      filter((PROGRAM_NAME == "All Programs") | (PROGRAM_NAME == "")) %>% 
      mutate(
        fillColor=ifelse(PROGRAM_AREA_NAME==input$program,paste('rgba(',paste(col2rgb('#1a3f72'),collapse=", "),",1)"),
                         paste('rgba(',paste(col2rgb('#1a3f72'),collapse=", "),",0.5)"))) %>% 
      mutate(
        fillColor_skill=ifelse(PROGRAM_AREA_NAME==input$program,paste('rgba(',paste(col2rgb('#1a3f72'),collapse=", "),",1)"),
                         paste('rgba(',paste(col2rgb('#1a3f72'),collapse=", "),",0.5)")))
    
  })

  
  # value_select2 <- reactive({
  #   
  #   req(input$select_further)
  #   
  #   data_plot_all()[,input$select_further] 
  # })
  # 
  
  
  # value_select_all_programs <- reactive({
  #   
  #   req(input$select_further)
  #   
  #   data_plot_all_programs()[,input$select_further] 
  # })
  # 
  # 
  

  # Further Studies Plot under Demographics
  output$plot_program_satisfaction <- renderPlotly ({

 
    #req(data_plot_all()$FURTH_STUDIES)
    req(data_plot_all_programs()$PROGRAM_AREA_NAME)
   

      plot_ly (x = data_plot_all_programs()$satisfaction_rate,
               y = ~ reorder(data_plot_all_programs()$PROGRAM_AREA_NAME, data_plot_all_programs()$satisfaction_rate),
               type = 'bar',
               color=~I(data_plot_all_programs()$fillColor)) %>% 
        layout(title = '', titlefont = list(
          family = "Myriad-Pro",
          size = 16),
          orientation = 'h',
          xaxis = list(title = "",tickformat = "%",zeroline=FALSE,fixedrange=TRUE),
          yaxis = list(title = "",fixedrange=TRUE),
          margin = list(l = 220, pad=7)) %>% 
        add_annotations(xref = 'x', yref = 'y',
                        x =data_plot_all_programs()$satisfaction_rate , 
                        y = reorder(data_plot_all_programs()$PROGRAM_AREA_NAME, data_plot_all_programs()$satisfaction_rate),
                        text = paste0(round(data_plot_all_programs()$satisfaction_rate*100, 0), '%'),
                        showarrow = FALSE,xanchor = 'left',xshift = 3,opacity = 0.7) %>% 
        config(displayModeBar = F)  

      
  })
  


  # Working in a program-related job by program area plot under employment

  
  output$plot_program_relate <- renderPlotly({
    
    #req(data_plot_all()$PROGRAM_NAME)
    #req(data_plot_all()$JOB_PROGRAM_RELATED)
    req(data_plot_all_programs()$PROGRAM_AREA_NAME)


        
        plot_ly (x = data_plot_all_programs()$JOB_PROGRAM_RELATED,
                 y = ~ reorder(data_plot_all_programs()$PROGRAM_AREA_NAME, data_plot_all_programs()$JOB_PROGRAM_RELATED),
                 type = 'bar',
                 color=~I(data_plot_all_programs()$fillColor))  %>% 
          
          #marker = list(color = paste('rgba(',paste(col2rgb('#1A3F72'),collapse=", "),",1)"))) %>% 
          layout(orientation = 'h',
                 title = '', titlefont = list(
                   
                   family = "Myriad-Pro",
                   size = 16),
                 xaxis = list(title = "",tickformat = "%",zeroline=FALSE,fixedrange=TRUE),
                 yaxis = list(title = "",fixedrange=TRUE),
                 margin = list(l = 220,pad=7)) %>% 
          add_annotations(xref = 'x', yref = 'y',
                          x =data_plot_all_programs()$JOB_PROGRAM_RELATED , 
                          y = reorder(data_plot_all_programs()$PROGRAM_AREA_NAME, data_plot_all_programs()$JOB_PROGRAM_RELATED),
                          text = paste0(round(data_plot_all_programs()$JOB_PROGRAM_RELATED*100, 0), '%'),
                          showarrow = FALSE,xanchor = 'left',xshift = 3,opacity = 0.7) %>% 
          config(displayModeBar = F)
      
  

  })
  

  # Knowledge and skills gained useful in performing their job by program area plot under employment

  
  output$plot_program_skill <- renderPlotly({
    
    #req(data_plot_all()$PROGRAM_NAME)
    #req(data_plot_all()$USEFUL_PERFORM_JOB)
    req(data_plot_all_programs()$PROGRAM_AREA_NAME)
    

      plot_ly (x = data_plot_all_programs()$USEFUL_PERFORM_JOB,
               y = ~ reorder(data_plot_all_programs()$PROGRAM_AREA_NAME, data_plot_all_programs()$USEFUL_PERFORM_JOB),
               type = 'bar',
               color=~I(data_plot_all_programs()$fillColor_skill))  %>% 
        
        #marker = list(color = paste('rgba(',paste(col2rgb('#1A3F72'),collapse=", "),",1)"))) %>% 
        layout(orientation = 'h',
               title = '', titlefont = list(
                 
                 family = "Myriad-Pro",
                 size = 16),
               xaxis = list(title = "",tickformat = "%",zeroline=FALSE,fixedrange=TRUE),
               yaxis = list(title = "",fixedrange=TRUE),
               margin = list(l = 220,pad=7)) %>% 
        add_annotations(xref = 'x', yref = 'y',
                        x =data_plot_all_programs()$USEFUL_PERFORM_JOB , 
                        y = reorder(data_plot_all_programs()$PROGRAM_AREA_NAME, data_plot_all_programs()$USEFUL_PERFORM_JOB),
                        text = paste0(round(data_plot_all_programs()$USEFUL_PERFORM_JOB*100, 0), '%'),
                        showarrow = FALSE,xanchor = 'left',xshift = 3,opacity = 0.7) %>% 
        config(displayModeBar = F)

    
  })
  
  
  
  
 ## REMOVED REACTIVE
  # Reactive value for select input values for satisfaction section

  
  # Get the data set with the appropriate name from the selected input


  value_select <- reactive({
    
    req(input$select)
   
    data_plot_all()[,input$select] 
  })
  
  value_select_satisfaction <- reactive({
    
    req(input$select)
    
    data_plot_all_programs()[,input$select] 
  })
  

  output$plot_program_switch <- renderPlotly({
 
    #req(data_plot_all()$PROGRAM_NAME)
    req(data_plot_all_programs()$PROGRAM_AREA_NAME)
    
      data_plot_all_programs() %>% 
        plot_ly (x = value_select_satisfaction(),
                 y = ~ reorder(data_plot_all_programs()$PROGRAM_AREA_NAME, value_select_satisfaction()), # or get(input$select)
                 type = 'bar',
                 color=~I(data_plot_all_programs()$fillColor)) %>% 
        layout(title = '', titlefont = list(
          family = "Myriad-Pro",
          size = 16),
          orientation = 'h',
          xaxis = list(title = "",tickformat = "%",zeroline=FALSE,fixedrange=TRUE),
          yaxis = list(title = "",fixedrange=TRUE),
          margin = list(l = 220, pad=7)) %>% 
        add_annotations(xref = 'x', yref = 'y',
                        x = value_select_satisfaction(), 
                        y = ~ reorder(data_plot_all_programs()$PROGRAM_AREA_NAME, value_select_satisfaction()),
                        text = paste0(round(value_select_satisfaction()*100, 0), '%'),
                        showarrow = FALSE,xanchor = 'left',xshift =7,opacity = 0.7) %>% 
        config(displayModeBar = F)
      
      


  })

      
  
  
  output$title_box_satisfaction <- renderUI({
    HTML("Students have taken further studies")
      
  })
  

  
  data <- reactive({
    get(input$dataset)
  })
  
  output$title_select <- renderUI({
    HTML("Skill development by program area")
  })
  

  
  output$title4 <- renderUI({
    HTML("Working in a program-related job by program area")
  })
  
  output$satisfaction_edu <- renderUI({
    HTML("Satisfaction with education by program area")

  })
  
  output$title5 <- renderUI({
    HTML("Knowledge and skills gained useful in performing job by program area")
  })
  
  data <- reactiveVal()
  data(students_download)
  
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("BC Student Outcomes Data-2015-2017",".csv", sep="")
    },
    
    content = function(file) {
      write.csv(data(), file,na = "",row.names = FALSE,
                col.names = FALSE,
                append = TRUE,
                sep = ",")
    }
  )
  
  output$draft <- renderUI({
    div(class="watermark", "Draft", style= "opacity: 0.2; position: fixed;top: 60%;left:40%;font-size: 7vw;color:red;
        transform: rotate(-45deg);z-index: 9999;")
    
  })
  
  output$summary_filter <- renderUI ({
    div(style="padding: 5px; margin-left:10px;color: #2A64AB;",
      h5(HTML("<em>","<strong>","Results are based on:","</strong>","</em>")),
      p(HTML("<em>",paste0(input$student_group,","," ", input$institution,","," ", input$program, ifelse(input$program_name==" "," ",",")," ", input$program_name),"</em>"))
    )
    
  })
  
  output$summary_filter_employment <- renderUI ({
    div(style="padding: 5px; margin-left:10px;color: #2A64AB;",
        h5(HTML("<em>","<strong>","Results are based on:","</strong>","</em>")),
        p(HTML("<em>",paste0(input$student_group,","," ", input$institution,","," ", input$program, ifelse(input$program_name==" "," ",",")," ", input$program_name),"</em>"))
    )
    
  })
  
  output$summary_filter_skill <- renderUI ({
    div(style="padding: 5px; margin-left:10px;color: #2A64AB;",
        h5(HTML("<em>","<strong>","Results are based on:","</strong>","</em>")),
        p(HTML("<em>",paste0(input$student_group,","," ", input$institution,","," ", input$program, ifelse(input$program_name==" "," ",",")," ", input$program_name),"</em>"))
    )
    
  })
  
  
  observeEvent(input$btn, {
    enable("element")
  })
  
  output$note <- renderUI ({
    
    div("This interactive tool allows you to filter by student group, institution, program area, and program name.", style = "font-style: italic;padding: 10px 10px 10px 30px;")
  })
  


  

    
  
})



